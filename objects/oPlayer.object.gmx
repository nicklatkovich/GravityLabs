<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
DirGrav = -1;
CanChangeGrav = true;
Angle = 0;
Speed = 8;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (CanChangeGrav) {
    var newDir = -1;
    if (keyboard_check_pressed(vk_left)) {
        newDir = 2;
    } else if (keyboard_check_pressed(vk_right)) {
        newDir = 0;
    } else if (keyboard_check_pressed(vk_up)) {
        newDir = 1;
    } else if (keyboard_check_pressed(vk_down)) {
        newDir = 3;
    }
    if (newDir != -1) {
        var xt = xx;
        var yt = yy;
        var xp, yp;
        var steps = 0;
        do {
            xp = xt;
            yp = yt;
            xt += Dx(newDir);
            yt += Dy(newDir);
            steps++;
        } until (Map.Map[#xt,yt] != 0);
        steps--;
        if (xp != xx || yp != yy) {
            DirGrav = newDir;
            XTo = (xp + 0.5) * Map.CellSize;
            YTo = (yp + 0.5) * Map.CellSize;
            CanChangeGrav = false;
            xx = xp;
            yy = yp;
            AngleTo = (DirGrav + 1) * 90;
            AngleSpeed = angle_difference(AngleTo, Angle) / steps / (Map.CellSize / Speed);
        }
    }
} else {
    x += Dx(DirGrav) * Speed;
    y += Dy(DirGrav) * Speed;
    Angle += AngleSpeed;
    var stop = false;
    switch (DirGrav) {
        case 0:
            if (x &gt; XTo) {
                stop = true;
            }
            break;
        case 1:
            if (y &lt; YTo) {
                stop = true;
            }
            break;
        case 2:
            if (x &lt; XTo) {
                stop = true;
            }
            break;
        case 3:
            if (y &gt; YTo) {
                stop = true;
            }
            break;
    }
    if (stop) {
        CanChangeGrav = true;
        x = XTo;
        y = YTo;
        Angle = AngleTo;
    }
}

if (keyboard_check_pressed(ord('R'))) {
    with (all) {
        instance_destroy( );
    }
    instance_create(0, 0, oMap);
} else if (keyboard_check_pressed(vk_space)) {
    instance_destroy( );
    oPlayerInit(Map, Map.StartX, Map.StartY);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sPlayer, 0, x, y, Map.CellSize / 64, Map.CellSize / 64, Angle, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
