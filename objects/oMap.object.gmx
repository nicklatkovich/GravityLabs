<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTestLab</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ItemsCount = 0;

randomize( );
MapSeed = rand(1024);

Map = ds_grid_create(16, 8);
//Map = ds_grid_create(global.MapWidth, global.MapHeight);

load_map_from_file(Map, 'Chamber040001.grlmap');
//generate_map(Map, MapSeed);
var w = ds_grid_width(Map);
var h = ds_grid_height(Map);
MapSurf = surface_create(1, 1);
CellSize = min(
    room_width / w,
    room_height / h);
Scale = CellSize / 64;
draw_map(MapSurf, Map, CellSize);
SurfBack = surface_create(w * CellSize, h * CellSize);
draw_back(SurfBack, CellSize);

oPlayerInit(id, StartX, StartY);

/*
Exit = instance_create((FinishX + 0.5) * CellSize, (FinishY + 0.5) * CellSize, oDoor);
for (var d = rand(4); d &lt; 7; d++) {
    if (Map[#FinishX + Dx(d),FinishY + Dy(d)] == 1) {
        Exit.Angle = (d + 1) * 90;
        break;
    }
}
Exit.SpriteDoors = sExitDoors;
*/

StartDoors = instance_create(StartX, StartY, oDoor);
StartDoors.SpriteDoors = sStartDoors;

instance_create(0, 0, oMapPresenter);

for (var i = 0; i &lt; ItemsCount; i++) {
    var item = Items[i];
    if (item.InputsCount &gt; 1) {
        var lockX, lockY, lockDx, lockDy;
        switch (item.Dir) {
            case 0:
                break;
            case 1:
                lockX = item.xx + 0.5;
                lockY = item.yy - 0.5;
                lockDx = -0.25;
                lockDy = 0;
                break;
            case 2:
                break;
            case 3:
                break;
        }
        for (var j = 0; j &lt; item.InputsCount; j++) {
            item.Locks[item.LocksCount] = instance_create(lockX, lockY, oLock);
            lockX += lockDx;
            lockY += lockDy;
            item.LocksCount++;
        }
    }
}

Ways = ds_grid_create(w * 8, h * 8);
ds_grid_clear(Ways, 0);

for (var i = 0; i &lt; ItemsCount; i++) {
    var item = Items[i];
    var region = get_puts_coords(item);
    if (is_undefined(region) == false) {
        ds_grid_set_region(Ways, region[0] - 1, region[1] - 1, region[2] + 1, region[3] + 1, 1);
        if (item.object_index == oLaserGenerator || item.object_index == oButton) {
            var dir = item.Dir + 1;
            var dx = abs(Dx(dir));
            var dy = abs(Dy(dir));
            ds_grid_set_region(Ways, region[0] - dx, region[1] - dy, region[2] + dx, region[3] + dy, 6);
        }
        ds_grid_set_region(Ways, region[0], region[1], region[2], region[3], 2);
    }
}

var w8 = w * 8;
var h8 = h * 8;

for (var i = 0; i &lt; ItemsCount; i++) {
    var item = Items[i];
    for (var j = 0; j &lt; item.OutputsCount; j++) {
        var wayLampColor = make_colour_hsv(irandom(255), 255, 255);
        //var wayLampColor = c_aqua;
        var itemTo = item.Outputs[j];
        var region1 = get_puts_coords(item);
        var region2 = get_puts_coords(itemTo);
        for (var xx = region1[0]; xx &lt;= region1[2]; xx++) {
            for (var yy = region1[1]; yy &lt;= region1[3]; yy++) {
                if (Ways[#xx,yy] == 2) {
                    Ways[#xx,yy] = 4;
                }
            }
        }
        for (var xx = region2[0]; xx &lt;= region2[2]; xx++) {
            for (var yy = region2[1]; yy &lt;= region2[3]; yy++) {
                if (Ways[#xx,yy] == 2) {
                    Ways[#xx,yy] = 5;
                }
            }
        }
        var shortWay = short_way(Ways, region1[0], region1[1], region2[0], region2[1]);
        var out = false;
        var xn = shortWay[1] mod w8;
        var yn = shortWay[1] div w8;
        for (var k = 1; k &lt;= shortWay[0]; k++) {
            var xx = xn;
            var yy = yn;
            if (k &lt; shortWay[0]) {
                xn = shortWay[k] mod w8;
                yn = shortWay[k] div w8;
            }
            if (out == false &amp;&amp; Ways[#xn,yn] != 5) {
                out = true;
            }
            if (out) {
                for (var dx = -1; dx &lt;= 1; dx++) {
                    for (var dy = -1; dy &lt;= 1; dy++) {
                        var x1 = xx + dx;
                        var y1 = yy + dy;
                        if (Ways[#x1,y1] == 0) {
                            Ways[#x1,y1] = 1;
                        }
                    }
                }
                var needBreak = false;
                if (Ways[#xx,yy] == 4) {
                    needBreak = true;
                }
                Ways[#xx,yy] = 3;
                var wayLamp = instance_create(xx / 8 - 0.5, yy / 8 - 0.5, oWayLamp);
                wayLamp.Color = wayLampColor;
                wayLamp.visible = false;
                wayLamp.Item = item;
                wayLamp.OutputNumber = j;
                if (Map[#xx div 8,yy div 8] == 1) {
                    wayLamp.depth = -200;
                }
                if (needBreak) {
                    break;
                }
            }
        }
        for (var xx = region1[0]; xx &lt;= region1[2]; xx++) {
            for (var yy = region1[1]; yy &lt;= region1[3]; yy++) {
                if (Ways[#xx,yy] == 4) {
                    Ways[#xx,yy] = 2;
                }
            }
        }
        for (var xx = region2[0]; xx &lt;= region2[2]; xx++) {
            for (var yy = region2[1]; yy &lt;= region2[3]; yy++) {
                if (Ways[#xx,yy] == 5) {
                    Ways[#xx,yy] = 2;
                }
            }
        }
    }
}

SurfWays = surface_create(w * CellSize, h * CellSize);
SurfWaysBack = surface_create(w * CellSize, h * CellSize);
surface_set_target(SurfWays);
for (var xx = 0; xx &lt; w8; xx++) {
    for (var yy = 0; yy &lt; h8; yy++) {
        if (Map[#xx div 8,yy div 8] == 1) {
            if (Ways[#xx,yy] == 3) {
                draw_sprite_ext(sWay, 0, xx * 8, yy * 8, Scale, Scale, 0, c_white, 1);
            }
        }
    }
}
surface_reset_target( );
surface_set_target(SurfWaysBack);
for (var xx = 0; xx &lt; w8; xx++) {
    for (var yy = 0; yy &lt; h8; yy++) {
        if (Map[#xx div 8,yy div 8] != 1) {
            if (Ways[#xx,yy] == 3) {
                draw_sprite_ext(sWay, 1, xx * 8, yy * 8, Scale, Scale, 0, c_white, 1);
            }
        }
    }
}
surface_reset_target( );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ds_grid_destroy(Map);
ds_grid_destroy(Ways);
delete_surface(MapSurf);
delete_surface(SurfBack);
delete_surface(SurfWays);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_surface(SurfBack, 0, 0);
draw_surface(SurfWaysBack, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
